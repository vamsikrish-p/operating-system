#include <stdio.h>

#define MAX 10
#define RESOURCES 3

int main() {
    int max[MAX][RESOURCES], allot[MAX][RESOURCES], need[MAX][RESOURCES];
    int available[RESOURCES], finish[MAX], safeSeq[MAX];
    int n, m, i, j, k, count = 0;

    printf("Enter number of processes: ");
    scanf("%d", &n);
    printf("Enter number of resources: ");
    scanf("%d", &m);

    printf("Enter maximum resource matrix:\n");
    for (i = 0; i < n; i++) {
        for (j = 0; j < m; j++) {
            scanf("%d", &max[i][j]);
        }
    }

    printf("Enter allocation matrix:\n");
    for (i = 0; i < n; i++) {
        for (j = 0; j < m; j++) {
            scanf("%d", &allot[i][j]);
        }
    }

    printf("Enter available resources:\n");
    for (i = 0; i < m; i++) {
        scanf("%d", &available[i]);
    }

    for (i = 0; i < n; i++) {
        for (j = 0; j < m; j++) {
            need[i][j] = max[i][j] - allot[i][j];
        }
    }

    for (i = 0; i < n; i++) {
        finish[i] = 0;
    }

    while (count < n) {
        int found = 0;
        for (i = 0; i < n; i++) {
            if (finish[i] == 0) {
                for (j = 0; j < m; j++) {
                    if (need[i][j] > available[j]) {
                        break;
                    }
                }
                if (j == m) {
                    for (k = 0; k < m; k++) {
                        available[k] += allot[i][k];
                    }
                    safeSeq[count++] = i;
                    finish[i] = 1;
                    found = 1;
                }
            }
        }
        if (found == 0) {
            printf("System is not in a safe state\n");
            return 0;
        }
    }

    printf("System is in a safe state.\nSafe sequence is: ");
    for (i = 0; i < n; i++) {
        printf("%d ", safeSeq[i]);
    }
    printf("\n");

    return 0;
}
OUTPUT : 
Enter allocation matrix:
Enter available resources:
System is not in a safe state
Enter number of processes:
